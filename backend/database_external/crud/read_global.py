import logging
from sqlalchemy import text
from fastapi import HTTPException
from sqlalchemy.exc import SQLAlchemyError
from sqlalchemy.ext.asyncio import AsyncSession

# Logger espec√≠fico
logger = logging.getLogger(__name__)

# üìå Fun√ß√£o gen√©rica para executar consultas (ass√≠ncrona)
async def fetch_all(db: AsyncSession, stmt):
    try:
        result = await db.execute(stmt)  # Execu√ß√£o ass√≠ncrona
        return result.scalars().all()  # Obt√©m todos os resultados
    except SQLAlchemyError as e:
        logger.exception(f"Erro ao buscar registros: {e}")
        raise

async def fetch_one(db: AsyncSession, stmt):
    try:
        result = await db.execute(stmt)  # Execu√ß√£o ass√≠ncrona
        return result.scalar_one_or_none()  # Obt√©m um √∫nico registro ou None
    except SQLAlchemyError as e:
        logger.exception(f"Erro ao buscar registro: {e}")
        raise

async def fetch_all_rows(db: AsyncSession, stmt):
    """ Para selects com m√∫ltiplas colunas (e.g., JOIN, fun√ß√µes agregadas), 
        use .all() ao inv√©s de .scalars().all().
    """
    try:
        result = await db.execute(stmt)
        return result.all()  # Retorna todas as linhas como tuplas
    except SQLAlchemyError as e:
        logger.exception(f"Erro ao buscar registros: {e}")
        raise


# üìå Fun√ß√µes de leitura para cada tabela
# üîç Busca o √∫ltimo ID ativo da tabela Global
async def get_last_active_user_id(db: AsyncSession):
    query = text("""SELECT "usuarioAtivo_ID" FROM "Global";""")
    result = await fetch_all_rows(db, query)

    if not result or result[0][0] is None:
        #raise HTTPException(status_code=404, detail="Nenhum usu√°rio ativo encontrado")
        return None
    
    # Extrai apenas os IDs de cada tupla e cria uma lista
    usuario_ativo_ids = [row[0] for row in result]

    if not usuario_ativo_ids:
        #raise HTTPException(status_code=404, detail="Lista de IDs de usu√°rios vazia")
        return None

    return usuario_ativo_ids[0]  # Retorna o √∫ltimo ID da lista

# üîç Busca nome e n√≠vel de acesso de um usu√°rio pelo ID
async def get_user_info_by_id(db: AsyncSession, user_id: int):
    query = text("""
        SELECT "Nome", "NivelAcesso_ID"
        FROM "Usuarios"
        WHERE "ID" = :user_id;
    """).bindparams(user_id=user_id)

    result = await fetch_all_rows(db, query)

    if not result:
        raise HTTPException(status_code=404, detail="Usu√°rio n√£o encontrado")

    nome, nivel_acesso = result[0]
    return {"id": user_id, "nome": nome, "nivel_acesso": nivel_acesso}

# üîç Busca permiss√µes para um n√≠vel de acesso
async def get_permissoes_ativas_por_nivel_acesso(db: AsyncSession, nivel_acesso_id: int):
    """
    Retorna todas as permiss√µes ativas (valor = true) associadas a um determinado n√≠vel de acesso.

    Executa uma consulta SQL direta na tabela "PermissoesOEE" para buscar os nomes das permiss√µes
    vinculadas ao n√≠vel de acesso informado, cujo valor seja verdadeiro.

    Args:
        db (AsyncSession): Sess√£o de banco de dados ass√≠ncrona.
        nivel_acesso_id (int): ID do n√≠vel de acesso desejado.

    Returns:
        dict: Um dicion√°rio contendo o ID do n√≠vel de acesso e uma lista com os nomes das permiss√µes ativas.
              Exemplo:
              {
                  "nivel_acesso_id": 2,
                  "permissoes": ["VisualizarRelatorio", "EditarParametros"]
              }

    Raises:
        HTTPException: Se nenhuma permiss√£o ativa for encontrada para o n√≠vel de acesso informado.
    """
    query = text("""
        SELECT "permissao"
        FROM "PermissoesOEE"
        WHERE "NivelAcesso_ID" = :nivel_acesso_id
        AND "valor" = true;
    """).bindparams(nivel_acesso_id=nivel_acesso_id)

    result = await fetch_all_rows(db, query)

    if not result:
        raise HTTPException(status_code=404, detail="Nenhuma permiss√£o encontrada para esse n√≠vel de acesso")

    permissoes = [row[0] for row in result]

    return {"nivel_acesso_id": nivel_acesso_id, "permissoes": permissoes}





